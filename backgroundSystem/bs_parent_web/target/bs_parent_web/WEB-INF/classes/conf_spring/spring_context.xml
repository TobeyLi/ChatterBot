<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--希望管理所有的业务逻辑组件，等。。。-->

    <!--扫面对应包下所有组件，除了controller-->
    <context:component-scan base-package="cn.edu.hust.*">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--spring用来控制业务逻辑。数据源、事务控制、aop等-->


    <!--==================配置数据源==========================-->
    <!--引入数据库的配置文件-->
    <!--注意：每个开发者选择属于自己的db*_config.properties-->
    <context:property-placeholder location="classpath:conf_spring/db2_config.properties"/>

    <!--配置数据源，采用c3p0连接池-->
    <bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--注入属性-->
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>


    <!--========================整合mybatis=========================================================================================-->
    <!--
    整合mybatis
        目的：1、spring管理所有组件。包括mapper的实现类。
                service调用Dao的时候，只需要使用spring提供的IOC，
                自动注入mapper。
              2、spring用来管理事务，spring声明式事务
    -->
    <!--创建出SqlSessionFactory对象-->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="comboPooledDataSource"></property>
        <!--configLocation指定mybatis全局配置文件的位置-->
        <property name="configLocation" value="classpath:conf_mybatis/MyBatis_config.xml"></property>
        <!--指定mapper配置文件的位置-->
        <property name="mapperLocations" value="classpath*:mapper/*.xml"></property>
    </bean>

    <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描所有的dao接口的实现,加入到ioc容器中-->
        <property name="basePackage" value="cn.edu.hust.dao"></property>
    </bean>

    <!--
    扫描所有的mapper接口的实现，让这些mapper能够自动注入.
    base-package:指定mapper接口的包名.
    -->
    <!--<mybatis-spring:scan base-package="cn.edu.hust.dao"></mybatis-spring:scan>-->


    <!--=================spring事务管理===================================-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--要能管事务，需要控制住数据源-->
        <!--数据源中，连接的开启、关闭，回滚事务的操作，我们用事务管理器来做-->
        <property name="dataSource" ref="comboPooledDataSource"></property>
    </bean>

    <!--开启基于注解的事务，也可以使用xml配置形式的事务（比较重要的都是使用配置形式）-->
    <!--<tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>-->

    <!--spring配置文件的核心点：数据源，与mybatis的整合，事务控制-->
</beans>